require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const translate = require('google-translate-api-x');

// Mapeamento de emojis de bandeiras para c√≥digos de idioma
const flagToLang = {
    "üá∫üá∏": "en", // Ingl√™s
    "üá¨üáß": "en", // Ingl√™s (UK)
    "üá™üá∏": "es", // Espanhol
    "üáµüáπ": "pt", // Portugu√™s (Portugal)
    "üáßüá∑": "pt", // Portugu√™s (Brasil)
    "üá´üá∑": "fr", // Franc√™s
    "üá©üá™": "de", // Alem√£o
    "üáÆüáπ": "it", // Italiano
    "üáØüáµ": "ja", // Japon√™s
    "üá®üá≥": "zh-cn", // Chin√™s simplificado
    "üá∑üá∫": "ru"  // Russo
};

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMessageReactions
    ]
});

client.once("ready", () => {
    console.log(`Bot est√° online como ${client.user.tag}!`);
});

// Evento quando um usu√°rio reage a uma mensagem
client.on("messageReactionAdd", async (reaction, user) => {
    if (user.bot) return; // Ignora rea√ß√µes de outros bots

    const { message, emoji } = reaction;

    // Verifica se o emoji √© uma bandeira reconhecida
    if (flagToLang[emoji.name]) {
        const targetLang = flagToLang[emoji.name];

        try {
            const result = await translate(message.content, { to: targetLang });
            await message.reply(`üåç **Translation to ${emoji.name}:**\n${result.text}`);
        } catch (error) {
            console.error(error);
            await message.reply("‚ùå Erro ao traduzir. Tente novamente.");
        }
    }
});

client.login(process.env.TOKEN);
